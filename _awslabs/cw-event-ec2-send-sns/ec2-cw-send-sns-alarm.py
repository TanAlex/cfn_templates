"""
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Permission is hereby granted, free of charge, to any person obtaining a copy of this
software and associated documentation files (the "Software"), to deal in the Software
without restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Security Control: EC2 Must Be In US Regions
Description:  Checks for compliance to determine if an EC2 instance is created
  in a valid region. If not, will invoke an SNS notification
Runtime: Python 3.6
"""

import logging
import os
import json
import boto3
from botocore.exceptions import ClientError

OUTBOUND_TOPIC_ARN = os.environ["outbound_topic_arn"]


def lambda_handler(event, context):
    """
    Main Lambda handler.
    Evaluates the control and makes messaging decisions.
    """
    # print(json.dumps(event))
    setup_logging()
    log.info('Got an event!')
    log.info('e')

    Regions = os.environ["Regions"].split(",")

    # If else statement that determines if stack was created in invalid region or not.
    # Also handles logic in the event of failed stack creation in invalid region.
    try:
        if event["detail"]["awsRegion"] in Regions:
            print(
                "No violations found for EC2 Instance(s) being brought up in an invalid region.")
        elif event["detail"]["awsRegion"] not in Regions:
            ec2_invalid_region_instance = []
            if event["detail"]["eventName"] == "ModifyInstanceAttribute":
                ec2_invalid_region_instance = event["detail"]["requestParameters"]["instanceId"]
            elif event["detail"]["eventName"] == "RunInstances":
                for instance in event["detail"]["responseElements"]["instancesSet"]["items"]:
                    ec2_invalid_region_instance.append(instance["instanceId"])

            if ec2_invalid_region_instance:
                subject = "Violation - EC2 Instance(s) created/modified in invalid region"
                message = create_non_compliance_message(
                    ec2_invalid_region_instance, event, context)
                send_violation(OUTBOUND_TOPIC_ARN, message, subject)
    except KeyError:
        log.info('Region not found in the event.')
        # Since it's not a violation if security group rules aren't
        # in the event, we return true
        return True


def send_violation(OUTBOUND_TOPIC_ARN, message, subject):
    """
    Send Violation Function.
    Takes in the compiled message and sends to the outbound sns topic
    """
    findsnsregion = OUTBOUND_TOPIC_ARN.split(":")
    snsregion = findsnsregion[3]
    sendclient = boto3.client('sns', region_name=snsregion)
    try:
        sendclient.publish(
            TopicArn=OUTBOUND_TOPIC_ARN,
            Message=message,
            Subject=subject
        )
    except ClientError as err:
        print(err)
        return False


def create_non_compliance_message(ec2_invalid_region_instance, event, context):
    """
    Non-Compliance Message.
    Function that structures the outgoing SNS notification format
    """
    if type(ec2_invalid_region_instance) is list:
        ec2_invalid_region_instance = ''.join(ec2_invalid_region_instance)
    message = "Violation - EC2 Instance(s) created/modified in invalid region!  \n\n"
    message += 'EC2 Instance(s): ' + ec2_invalid_region_instance + '\n'
    message += 'Account: ' + event["account"] + "\n"
    message += "Region: " + event["detail"]["awsRegion"] + "\n"
    message += "\n\n"
    message += "This notification was generated by the Lambda function " + \
        context.invoked_function_arn
    return message


def setup_logging():
    """
    Logging Function.
    Creates a global log object and sets its level.
    """
    global log
    log = logging.getLogger()
    log_levels = {'INFO': 20, 'WARNING': 30, 'ERROR': 40}

    if 'logging_level' in os.environ:
        log_level = os.environ['logging_level'].upper()
        if log_level in log_levels:
            log.setLevel(log_levels[log_level])
        else:
            log.setLevel(log_levels['ERROR'])
            log.error("The logging_level environment variable is not set to INFO, WARNING, or \
                      ERROR.  The log level is set to ERROR")
    else:
        log.setLevel(log_levels['ERROR'])
        log.warning('The logging_level environment variable is not set. The log level is set to \
                    ERROR')
    log.info('Logging setup complete - set to log level ' + str(log.getEffectiveLevel()))