"""
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Permission is hereby granted, free of charge, to any person obtaining a copy of this
software and associated documentation files (the "Software"), to deal in the Software
without restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Information Block.
Checks for compliance on activities that could generate violations when an Auto Scaling Launch Configuration is created without an IAM Instance Profile
API Triggers: CreateLaunchConfiguration
Services: Cloudwatch Events (trigger), Autoscaling, SNS
"""

import os
import boto3
import json
import logging
from botocore.exceptions import ClientError

OUTBOUND_TOPIC_ARN = os.environ["outbound_topic_arn"]


def lambda_handler(event, context):
    setup_logging()
    log.info(json.dumps(event))
    invalid_config = check_config(event, context)

    # If invalid, the SNS notification is sent.
    if invalid_config:
        subject = "Violation - Auto Scaling Launch Config missing IAM Instance Profile!"
        message = create_non_compliance_message(invalid_config, event, context)
        send_violation(OUTBOUND_TOPIC_ARN, message, subject)
    else:
        log.info("no configs")

# Function performs a describe on the Auto Scaling Launch Configuration
def check_config(event, context):
    invalid_config = []
    client = boto3.client('autoscaling')
    launch_config_name = event["detail"]["requestParameters"]["launchConfigurationName"]
    try:
        describe_config = client.describe_launch_configurations(
            LaunchConfigurationNames=[launch_config_name])
    except ClientError as err:
        log.info(err)
        return False

    # Check if the IamInstanceProfile string is included in the JSON response. If it isn't, the launch config name is passed into the invalid_config list.
    for response in describe_config["LaunchConfigurations"]:
        if "IamInstanceProfile" in response:
            log.info("Launch Configuration: " + launch_config_name + " Contains IAM Instance Profile")
        else:
            invalid_config.append(response["LaunchConfigurationName"])
        return invalid_config

# Function sends out the SNS notification
def send_violation(outbound_topic_arn, message, subject):
    findsnsregion = OUTBOUND_TOPIC_ARN.split(":")
    snsregion = findsnsregion[3]
    sendclient = boto3.client('sns', region_name=snsregion)
    try:
        sendclient.publish(
            TopicArn=OUTBOUND_TOPIC_ARN,
            Message=message,
            Subject=subject
        )
    except ClientError as err:
        log.info(err)
        return False

# Function structures the format of the outgoing SNS notification
def create_non_compliance_message(invalid_config, event, context):
    message = "Violation - Auto Scaling Launch Config missing IAM Instance Profile:  \n\n"
    message += 'Auto Scaling Launch Configuration: ' + event["detail"]["requestParameters"]["launchConfigurationName"] + '\n'
    message += 'Account: ' + event["account"] + "\n"
    message += "Region: " + event["detail"]["awsRegion"] + "\n"
    message += "\n\n"
    message += "This notification was generated by the Lambda function " + \
        context.invoked_function_arn
    return message

def setup_logging():
    """
    Logging Function.
    Creates a global log object and sets its level.
    """
    global log
    log = logging.getLogger()
    log_levels = {'INFO': 20, 'WARNING': 30, 'ERROR': 40}

    if 'logging_level' in os.environ:
        log_level = os.environ['logging_level'].upper()
        if log_level in log_levels:
            log.setLevel(log_levels[log_level])
        else:
            log.setLevel(log_levels['ERROR'])
            log.error("The logging_level environment variable is not set to INFO, WARNING, or \
                        ERROR.  The log level is set to ERROR")
    else:
        log.setLevel(log_levels['ERROR'])
        log.warning('The logging_level environment variable is not set. The log level is set to \
                    ERROR')
    log.info('Logging setup complete - set to log level ' + str(log.getEffectiveLevel()))