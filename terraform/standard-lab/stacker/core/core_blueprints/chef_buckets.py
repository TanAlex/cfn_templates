#!/usr/bin/env python
"""Module with Chef S3 buckets."""
from __future__ import print_function
from os.path import dirname, realpath
import sys

from troposphere import (
    Equals, Export, If, Or, Ref, Join, Output, Sub, s3, GetAtt
)

import awacs.s3
from awacs.aws import Condition, Deny, PolicyDocument, Principal, Statement
# autogenerated conditions trip up pylint
from awacs.aws import Null, StringNotEquals  # pylint: disable=E0611

from stacker.blueprints.base import Blueprint
from stacker.blueprints.variables.types import CFNString


class ChefBuckets(Blueprint):
    """Stacker blueprint for creating core environment S3 buckets."""

    VARIABLES = {
        'ChefBucketName': {'type': CFNString,
                           'description': 'Name of bucket storing core Chef '
                                          'configuration',
                           'default': ''},
        'ChefDataBucketName': {'type': CFNString,
                               'description': 'Name of bucket storing extra/ '
                                              'restricted Chef data',
                               'default': ''},
        'CustomerName': {'type': CFNString,
                         'description': 'The nickname for the new customer. '
                                        'Must be all lowercase letters, '
                                        'should not contain spaces or special '
                                        'characters, nor should it include '
                                        'any part of EnvironmentName.',
                         'allowed_pattern': '[-_ a-z]*',
                         'default': ''},
        'EnvironmentName': {'type': CFNString,
                            'description': 'Name of Environment',
                            'default': 'common'}
    }

    def add_conditions(self):
        """Set up template conditions."""
        template = self.template
        variables = self.get_variables()

        for i in ['ChefBucketName', 'ChefDataBucketName']:
            template.add_condition(
                "%sOmitted" % i,
                Or(Equals(variables[i].ref, ''),
                   Equals(variables[i].ref, 'undefined'))
            )

    def add_resources(self):
        """Add resources to template."""
        template = self.template
        variables = self.get_variables()

        chefbucket = template.add_resource(
            s3.Bucket(
                'ChefBucket',
                AccessControl=s3.Private,
                BucketName=If(
                    'ChefBucketNameOmitted',
                    Ref('AWS::NoValue'),
                    variables['ChefBucketName'].ref
                ),
                LifecycleConfiguration=s3.LifecycleConfiguration(
                    Rules=[
                        s3.LifecycleRule(
                            NoncurrentVersionExpirationInDays=90,
                            Status='Enabled'
                        )
                    ]
                ),
                VersioningConfiguration=s3.VersioningConfiguration(
                    Status='Enabled'
                )
            )
        )
        template.add_output(Output(
            '%sName' % chefbucket.title,
            Description='Name of bucket storing core Chef configuration',
            Export=Export(Sub('${AWS::StackName}-%sName' % chefbucket.title)),
            Value=Ref(chefbucket)
        ))
        template.add_output(Output(
            '%sArn' % chefbucket.title,
            Description='Arn of bucket storing core Chef configuration',
            Export=Export(Sub('${AWS::StackName}-%sArn' % chefbucket.title)),
            Value=GetAtt(chefbucket, 'Arn')
        ))

        chefdatabucket = template.add_resource(
            s3.Bucket(
                'ChefDataBucket',
                AccessControl=s3.Private,
                BucketName=If(
                    'ChefDataBucketNameOmitted',
                    Ref('AWS::NoValue'),
                    variables['ChefDataBucketName'].ref
                ),
                VersioningConfiguration=s3.VersioningConfiguration(
                    Status='Enabled'
                )
            )
        )
        template.add_output(Output(
            '%sName' % chefdatabucket.title,
            Description='Name of bucket storing extra/restricted Chef data',
            Export=Export(Sub('${AWS::StackName}-'
                              '%sName' % chefdatabucket.title)),
            Value=Ref(chefdatabucket)
        ))
        template.add_output(Output(
            '%sArn' % chefdatabucket.title,
            Description='Arn of bucket storing extra/restricted Chef data',
            Export=Export(Sub('${AWS::StackName}-'
                              '%sArn' % chefdatabucket.title)),
            Value=GetAtt(chefdatabucket, 'Arn')
        ))

        # https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html
        template.add_resource(
            s3.BucketPolicy(
                'RequireChefDataBucketEncryption',
                Bucket=Ref(chefdatabucket),
                PolicyDocument=PolicyDocument(
                    Version='2012-10-17',
                    Statement=[
                        Statement(
                            Sid='DenyIncorrectEncryptionHeader',
                            Action=[awacs.s3.PutObject],
                            Condition=Condition(
                                StringNotEquals(
                                    's3:x-amz-server-side-encryption',
                                    'AES256'
                                )
                            ),
                            Effect=Deny,
                            Principal=Principal('*'),
                            Resource=[
                                Join('', [GetAtt(chefdatabucket, 'Arn'),
                                          '/*'])
                            ]
                        ),
                        Statement(
                            Sid='DenyUnEncryptedObjectUploads',
                            Action=[awacs.s3.PutObject],
                            Condition=Condition(
                                Null(
                                    's3:x-amz-server-side-encryption',
                                    'true'
                                )
                            ),
                            Effect=Deny,
                            Principal=Principal('*'),
                            Resource=[
                                Join('', [GetAtt(chefdatabucket, 'Arn'),
                                          '/*'])
                            ]
                        )
                    ]
                )
            )
        )

    def create_template(self):
        """Create template (main function called by Stacker)."""
        self.template.add_version('2010-09-09')
        self.template.add_description("Sturdy Platform - Core - Chef/Artifact "
                                      " Buckets - "
                                      "{0}".format(version()))
        self.add_conditions()
        self.add_resources()


def version():
    """Call version function from top of repo."""
    root_dir = dirname(dirname(dirname(dirname(realpath(__file__)))))
    if root_dir not in sys.path:
        sys.path.append(root_dir)
    import platform_version  # pylint: disable=import-error
    return platform_version.version()


# Helper section to enable easy blueprint -> template generation
# (just run `python <thisfile>` to output the json)
if __name__ == "__main__":
    from stacker.context import Context

    print(ChefBuckets('test',
                      Context({'namespace': 'test'}),
                      None).to_json())
