# These are the parameters we'll ask the user before creating the environment
Parameters:
    NotebookInstanceSubNetId:
        Type: AWS::EC2::Subnet::Id
        Description: "Select any subnet id"
        AllowedPattern: ^subnet\-[a-zA-Z0-9]+$
        ConstraintDescription: "You need to inform any subnetid"

    NotebookInstanceSecGroupId:
        Type: List<AWS::EC2::SecurityGroup::Id>
        Description: "Select the default security group"
        AllowedPattern: ^sg\-[a-zA-Z0-9]+$
        ConstraintDescription: "Select the default security group"
            
Resources:
    ####################
    ## PERMISSIONS
    ####################

    MLOpsSecurity:
        Type: AWS::CloudFormation::Stack
        DeletionPolicy: Delete
        Properties:
            TemplateURL: https://s3.amazonaws.com/aws-ai-ml-aod-latam/mlops-workshop/assets/mlops_security.yml

    MLOpsLambdaLayers:
        Type: AWS::CloudFormation::Stack
        DeletionPolicy: Delete
        Properties:
            TemplateURL: https://s3.amazonaws.com/aws-ai-ml-aod-latam/mlops-workshop/assets/mlops_crhelper.yml

    MLOpsProcessRequest:
        Type: AWS::CloudFormation::Stack
        DeletionPolicy: Delete
        Properties:
            TemplateURL: https://s3.amazonaws.com/aws-ai-ml-aod-latam/mlops-workshop/assets/mlops_op_process_request.yml
        DependsOn:
            - MLOpsLambdaLayers
            - MLOpsSecurity

    MLOpsDeploymentOperator:
        Type: AWS::CloudFormation::Stack
        DeletionPolicy: Delete
        Properties:
            TemplateURL: https://s3.amazonaws.com/aws-ai-ml-aod-latam/mlops-workshop/assets/mlops_op_deploy.yml
        DependsOn:
            - MLOpsLambdaLayers
            - MLOpsSecurity

    MLOpsTrainingOperator:
        Type: AWS::CloudFormation::Stack
        DeletionPolicy: Delete
        Properties:
            TemplateURL: https://s3.amazonaws.com/aws-ai-ml-aod-latam/mlops-workshop/assets/mlops_op_training.yml
        DependsOn: 
            - MLOpsLambdaLayers
            - MLOpsSecurity

    ## OK. Then we'll create some repos for the source code
    ## We need to create two branches in the default repo, so
    ## let's use a custom resource with a Lambda Function to do that 
    ## Also, when the stack is deleted we need to remove all the versioned
    ## files from the S3 bucket, otherwise it will fail
    MLOpsEnvSetup:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                ZipFile: !Sub |
                    import cfnresponse
                    import boto3
                    codeCommit = boto3.client('codecommit')
                    s3 = boto3.resource('s3')
                    ecr = boto3.client('ecr')
                    def lambda_handler(event, context):
                        responseData = {'status': 'NONE'}
                        if event['RequestType'] == 'Create':
                            repoName = event['ResourceProperties'].get('RepoName')
                            branch_names = event['ResourceProperties'].get('BranchNames')
                            branches = codeCommit.list_branches(repositoryName=repoName)['branches']
                            responseData['default_branch'] = branch_names[0] 
                            if len(branches) == 0:
                                putFiles = {'filePath': 'buildspec.yml', 'fileContent': "version: 0.2\nphases:\n  build:\n    commands:\n      - echo 'dummy'\n".encode()}
                                resp = codeCommit.create_commit(repositoryName=repoName, branchName='master', commitMessage=' - repo init', putFiles=[putFiles])
                                for i in branch_names:
                                    codeCommit.create_branch(repositoryName=repoName, branchName=i, commitId=resp['commitId'])
                                responseData['status'] = 'CREATED'
                        elif event['RequestType'] == 'Delete':
                            s3.Bucket( event['ResourceProperties'].get('BucketName') ).object_versions.all().delete()
                            try:
                                for i in event['ResourceProperties'].get('ImageRepoNames'):
                                    imgs = ecr.list_images(registryId='${AWS::AccountId}', repositoryName=i)
                                    ecr.batch_delete_image(registryId='${AWS::AccountId}', repositoryName=i, imageIds=imgs['imageIds'])
                            except Exception as e:
                                pass
                            responseData['status'] = 'DELETED'
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

            FunctionName: mlops-env-setup
            Handler: "index.lambda_handler"
            Timeout: 60
            MemorySize: 512
            Role: !Sub arn:aws:iam::${AWS::AccountId}:role/MLOps 
            Runtime: python3.7
        DependsOn:
            - MLOpsSecurity

    MLOpsEnvSetupCaller:
        Type: Custom::EnvSetupCaller
        Properties:
            ServiceToken: !GetAtt MLOpsEnvSetup.Arn
            RepoName: mlops
            BranchNames:
                - iris_model
            ImageRepoNames:
                - iris-model
            BucketName: !Ref MLOpsBucket
        DependsOn:
            - MLOpsRepo
            - MLOpsIrisModelRepo

    ####################
    ## REPOSITORIES
    ####################
    ## We have the custome resource that can invoke a lambda function to create the branches,
    ## So, let's create the CodeCommit repo and also the SageMaker Code repos
    MLOpsRepo:
        Type: AWS::CodeCommit::Repository
        Properties: 
            RepositoryDescription: Repository for the ML models/images code 
            RepositoryName: mlops
    
    MLOpsIrisModelRepo:
        Type: AWS::ECR::Repository
        Properties: 
            RepositoryName: iris-model

    MLOpsBucket:
        Type: AWS::S3::Bucket
        Properties: 
            BucketName: !Sub mlops-${AWS::Region}-${AWS::AccountId}
            Tags:
                - Key: Name
                  Value: !Sub mlops-${AWS::Region}-${AWS::AccountId}
            AccessControl: Private
            VersioningConfiguration:
                Status: Enabled
    

    ####################
    ## PIPELINES 
    ####################

    BuildPipelineIrisModel:
        Type: AWS::CloudFormation::Stack
        DeletionPolicy: Delete
        Properties:
            TemplateURL: https://s3.amazonaws.com/aws-ai-ml-aod-latam/mlops-workshop/assets/build_image.yml
            Parameters:
                RepoBranchName: iris_model
                ImageRepoName: iris-model
                ImageTagName: latest
        DependsOn:
            - MLOpsBucket
            - MLOpsCodeRepo

    MLPipelineIrisModel:
        Type: AWS::CloudFormation::Stack
        DeletionPolicy: Delete
        Properties:
            TemplateURL: https://s3.amazonaws.com/aws-ai-ml-aod-latam/mlops-workshop/assets/mlops_pipeline.yml
            Parameters:
                SourceBucketPath: !Ref MLOpsBucket
                ModelNamePrefix: iris-model
        DependsOn:
            - MLOpsBucket
            - MLOpsCodeRepo

    ####################
    ## Notebook Instance
    ####################
    MLOpsExercisesRepo:
        Type: AWS::SageMaker::CodeRepository
        Properties:
            CodeRepositoryName: MLOpsExercisesRepo
            GitConfig:
                RepositoryUrl: https://github.com/awslabs/amazon-sagemaker-mlops-workshop.git 

    MLOpsCodeRepo:
        Type: AWS::SageMaker::CodeRepository
        Properties:
            CodeRepositoryName: MLOpsCodeRepo
            GitConfig:
                RepositoryUrl: !GetAtt  MLOpsRepo.CloneUrlHttp 
                Branch: !Sub "${MLOpsEnvSetupCaller.default_branch}"
        DependsOn: MLOpsEnvSetupCaller

    IAWorkshopNotebookInstanceLifecycleConfig:
        Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
        Properties:
            NotebookInstanceLifecycleConfigName: !Sub ${AWS::StackName}-lifecycle-config
            OnStart:
                - Content: !Base64 |
                    #!/bin/bash
                    sudo -u ec2-user -i <<'EOF'

                    echo "Finally, let's clone and build an image for testing codebuild locally"
                    git clone https://github.com/aws/aws-codebuild-docker-images.git /tmp/aws-codebuild
                    chmod +x /tmp/aws-codebuild/local_builds/codebuild_build.sh

                    docker pull amazon/aws-codebuild-local:latest --disable-content-trust=false
                    
                    # This will affect only the Jupyter kernel called "conda_python3".
                    source activate python3

                    # Replace myPackage with the name of the package you want to install.
                    pip install tqdm 
                    
                    # You can also perform "conda install" here as well.

                    source deactivate

                    EOF

    MLOpsNotebookInstance:
        Type: "AWS::SageMaker::NotebookInstance"
        Properties:
            NotebookInstanceName: MLOpsWorkshop
            InstanceType: "ml.m4.xlarge"
            SubnetId: !Ref NotebookInstanceSubNetId
            SecurityGroupIds: !Ref NotebookInstanceSecGroupId
            RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/MLOps
            DefaultCodeRepository: MLOpsCodeRepo
            AdditionalCodeRepositories:
                - MLOpsExercisesRepo
            VolumeSizeInGB: 15
            LifecycleConfigName: !GetAtt IAWorkshopNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName
        DependsOn:
            - IAWorkshopNotebookInstanceLifecycleConfig
            - MLOpsCodeRepo
            - MLOpsExercisesRepo
            - MLOpsSecurity

Outputs:
    MLOpsNotebookInstanceId:
        Value: !Ref MLOpsNotebookInstance


