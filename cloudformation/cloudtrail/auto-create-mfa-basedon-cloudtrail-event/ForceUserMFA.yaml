AWSTemplateFormatVersion: 2010-09-09
Parameters:
  LambdaCodeBucket:
    Description: What bucket is the code stored in?
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^([a-zA-Z0-9\-]+\.?[a-zA-Z0-9\-]*)+[^\.\s]$
  LambdaCodePath:
    Default: ForceUserMFA.zip
    Description: Path/name of zip library
    Type: String
    MinLength: 3
    MaxLength: 63
Resources:
  AutoMFALambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: "ForceUserMFA.lambda_handler"
      Role:
        Fn::GetAtt:
          - "autoMfaLambdaRole"
          - "Arn"
      Code:
        S3Bucket:
          Ref: LambdaCodeBucket
        S3Key:
          Ref: LambdaCodePath
      Runtime: "python2.7"
      Timeout: "300"
  userMFACMK:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: "MFAUser key"
      KeyPolicy:
        Version: "2012-10-17"
        Id: "MFAUser"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS: !Join ["", ["arn:aws:sts::", !Ref "AWS::AccountId", ":root"]]
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Decrypt"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          -
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                Fn::GetAtt:
                  - "autoMfaLambdaRole"
                  - "Arn"
            Action:
              - "kms:Encrypt"
              - "kms:DescribeKey"
            Resource: "*"
  KMSAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: "alias/MFAUser"
      TargetKeyId: !Ref userMFACMK
    DependsOn: userMFACMK
  autoMfaLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        -
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
  userMFAPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Path : '/'
      ManagedPolicyName: user_mfa_access
      Description: "Policy for users to access their virtual mfa seed"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action: 'ssm:GetParameters'
            Resource: !Join ["", ["arn:aws:ssm:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":parameter/mfa-${aws:username}"]]
          -
            Effect: Allow
            Action: 'kms:Decrypt'
            Resource:
              Fn::GetAtt:
                - "userMFACMK"
                - "Arn"
  UserMFALambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
        - !Ref autoMfaLambdaRole
      PolicyName: user_mfa_lambda_exec_pol
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: "*"
          -
            Effect: Allow
            Action:
              - 'iam:ListMFADevices'
              - 'iam:ListUsers'
              - 'iam:ListVirtualMFADevices'
              - 'iam:CreateVirtualMFADevice'
              - 'iam:DeactivateMFADevice'
              - 'iam:DeleteVirtualMFADevice'
              - 'iam:EnableMFADevice'
              - 'iam:ListVirtualMFADevices'
              - 'iam:CreatePolicy'
              - 'iam:AttachUserPolicy'
            Resource: "*"
          -
            Effect: Allow
            Action:
            - 'kms:describe_key'
            Resource:
              Fn::GetAtt:
                - "userMFACMK"
                - "Arn"
          -
            Effect: Allow
            Action:
              - 'ssm:PutParameter'
            Resource: "*"
          -
            Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:CreateTable'
              - 'dynamodb:DescribeTable'
            Resource: "*"
          -
            Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
            Resource: "*"
  AutoMFAConfigRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: "MFA Auto Add"
      EventPattern:
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "iam.amazonaws.com"
          eventName:
            - "CreateUser"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "AutoMFALambda"
              - "Arn"
          Id: "AutoMFALambda"
  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "AutoMFALambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "AutoMFAConfigRule"
          - "Arn"