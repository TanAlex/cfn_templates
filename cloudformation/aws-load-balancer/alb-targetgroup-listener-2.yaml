  MasterELB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
      - Key: 'idle_timeout.timeout_seconds'
        Value: !Ref MasterLoadBalancerIdleTimeout
      - Key: 'routing.http2.enabled'
        Value: 'true'
      - Key: 'access_logs.s3.enabled'
        Value: !If [HasS3Bucket, 'true', 'false']
      - !If [HasS3Bucket, {Key: 'access_logs.s3.prefix', Value: !Ref 'AWS::StackName'}, !Ref 'AWS::NoValue']
      - !If [HasS3Bucket, {Key: 'access_logs.s3.bucket', Value: {'Fn::ImportValue': !Sub '${ParentS3StackAccessLog}-BucketName'}}, !Ref 'AWS::NoValue']
      Scheme: !Ref MasterELBScheme
      SecurityGroups:
      - !Ref MasterELBSG
      Subnets: !If
      - HasMasterELBSchemeInternal
      - - {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPrivate'}
        - {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPrivate'}
      - - {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'}
        - {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'}
      Tags:
      - Key: Name
        Value: 'jenkins-master'
  MasterELBTargetGroup: # not monitored, but MasterELB is monitored!
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/login'
      HealthCheckPort: '8080'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 25
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: 'jenkins-master'
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
      TargetGroupAttributes:
      - Key: 'deregistration_delay.timeout_seconds'
        Value: '30'
  MasterELBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref MasterELBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref MasterELB
      Port: 80
      Protocol: HTTP
  MasterIP:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref MasterIAMRole